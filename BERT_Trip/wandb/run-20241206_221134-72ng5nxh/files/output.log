  0%|                                                      | 0/377 [00:00<?, ?it/s]/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/modeling_utils.py:1161: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
  warnings.warn(
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   73, -100, -100, -100, -100],
        [-100, -100, -100, -100,   72, -100,   19, -100, -100, -100],
        [-100, -100, -100, -100, -100,   67, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   71, -100,   67, -100, -100],
        [-100, -100, -100, -100, -100,   68,   71,   59, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100,   23, -100, -100],
        [-100, -100, -100, -100,   16,   71, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72,   42, -100, -100],
        [-100, -100, -100, -100,   83, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   43,   72, -100,   71, -100],
        [-100, -100, -100, -100,   51,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,    7, -100, -100,   66, -100],
        [-100, -100, -100, -100, -100,   68, -100,   31, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100,   72, -100, -100],
        [-100, -100, -100, -100, -100,   37, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   45,    9, -100, -100, -100],
        [-100, -100, -100, -100, -100,   10, -100, -100, -100, -100],
        [-100, -100, -100, -100,   91, -100,   59, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   88, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   51,   68, -100,   71, -100],
        [-100, -100, -100, -100,   82,   14,   33, -100, -100, -100],
        [-100, -100, -100, -100,   80,   60, -100,   10, -100, -100],
        [-100, -100, -100, -100,   23, -100,   72,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   35,   68, -100,    7, -100, -100],
        [-100, -100, -100, -100, -100,   22,   11, -100, -100, -100],
        [-100, -100, -100, -100, -100,   42,   45, -100, -100, -100],
        [-100, -100, -100, -100,   80,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100,   20, -100],
        [-100, -100, -100, -100,   80, -100,   71, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(8.0483, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.0264, device='cuda:0', grad_fn=<DivBackward0>)
  0%|                                              | 1/377 [00:00<06:12,  1.01it/s]
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   82, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   59,   91, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100,   45,   63, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   32, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   12, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   69,   58, -100, -100, -100],
        [-100, -100, -100, -100,   57,   35,    5, -100, -100, -100],
        [-100, -100, -100, -100,   84,   35,   11,   10, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   72,   15, -100, -100, -100],
        [-100, -100, -100, -100,   79,   18, -100,   76, -100, -100],
        [-100, -100, -100, -100, -100, -100,   40,   51, -100, -100],
        [-100, -100, -100, -100, -100, -100,   82, -100, -100, -100],
        [-100, -100, -100, -100,   20,   88, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   22, -100, -100],
        [-100, -100, -100, -100,   51, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   75, -100, -100, -100, -100],
        [-100, -100, -100, -100,    6, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   79, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41,   38, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   51,   91,   78, -100, -100],
        [-100, -100, -100, -100, -100,   63,   30, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(7.5950, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.1419, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100,   68, -100,   71, -100],
        [-100, -100, -100, -100,   55, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   40, -100,   75, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   38, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   14, -100, -100, -100,   80, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   90,   28, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   87, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100,   10, -100,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100,   87, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   80,   56, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(6.7576, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.2224, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   71, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   71,    6, -100, -100],
        [-100, -100, -100, -100,   71, -100,   67, -100, -100, -100],
        [-100, -100, -100, -100, -100,   38, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,   67,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,   36, -100, -100, -100, -100],
        [-100, -100, -100, -100,   12, -100,   51, -100, -100, -100],
        [-100, -100, -100, -100,   60,   78,   43, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   35,   13, -100],
        [-100, -100, -100, -100,   20, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,    6,   60,   42, -100, -100],
        [-100, -100, -100, -100,   51, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   87,   37, -100, -100, -100],
        [-100, -100, -100, -100, -100,   42,   59, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   82, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   72, -100],
        [-100, -100, -100, -100,   80,   23, -100,   43, -100, -100],
        [-100, -100, -100, -100, -100, -100,   92,   85, -100, -100],
        [-100, -100, -100, -100,   79, -100, -100,   69,   37, -100],
        [-100, -100, -100, -100, -100, -100, -100,   43, -100, -100],
        [-100, -100, -100, -100,   68, -100,   72,   42, -100, -100],
        [-100, -100, -100, -100,   31,   74,   55,   86, -100, -100],
        [-100, -100, -100, -100,   91,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   38, -100, -100, -100, -100],
        [-100, -100, -100, -100,   72, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   11,   40, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   67,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100,   11, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(6.7145, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.2568, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   62,   88, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   46, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   64, -100,   28, -100],
        [-100, -100, -100, -100, -100, -100,   55, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   53, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100,   12, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   26, -100, -100,   36, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   13, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   78,   42, -100],
        [-100, -100, -100, -100,   80,   68,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   48,   37, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   57,   31, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   35,   22, -100, -100, -100],
        [-100, -100, -100, -100,   67, -100,   91,   78, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(6.5803, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.2990, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,    7,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   73, -100, -100, -100],
        [-100, -100, -100, -100,   87, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100,   64, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   87, -100,   69, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   56, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   48, -100,   26, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   37, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60,   71, -100, -100],
        [-100, -100, -100, -100,   80,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   43, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   14, -100, -100,   33,    7, -100],
        [-100, -100, -100, -100, -100, -100, -100,   67, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   45, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   36, -100, -100, -100, -100],
        [-100, -100, -100, -100,   15, -100,   37, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41,   11, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   46, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(6.2116, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.3392, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   69, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   90, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   24, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72,   67, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   11,   10, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   43,   49, -100],
        [-100, -100, -100, -100,   15,   26,   76, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   35, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   60,   45, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   64,   13, -100, -100, -100],
        [-100, -100, -100, -100,   72, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.9760, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.3678, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100,   77, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   68, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   22,   11, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   57, -100, -100, -100],
        [-100, -100, -100, -100,   80,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   54, -100, -100, -100],
        [-100, -100, -100, -100,   14,   40, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   87,   48, -100, -100],
        [-100, -100, -100, -100,   60, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72,   71, -100, -100],
        [-100, -100, -100, -100,   92,   47,   21, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   26, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   73, -100, -100],
        [-100, -100, -100, -100,   80,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   19, -100, -100, -100],
        [-100, -100, -100, -100, -100,    6, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   58,   48, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   84, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   71,   43, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   18,   87, -100],
        [-100, -100, -100, -100,   80,    7, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   46,   88,   62, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   23,   71, -100, -100],
        [-100, -100, -100, -100,   68,   23,   71, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(6.0248, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.3931, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100,   38, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   52, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   91,   85, -100, -100],
        [-100, -100, -100, -100,   80, -100,   84, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   10, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60,   43, -100, -100],
        [-100, -100, -100, -100,   68, -100,   72,   67, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100,   54,   83, -100, -100],
        [-100, -100, -100, -100, -100,   67, -100, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100,   10, -100, -100, -100],
        [-100, -100, -100, -100,   68,   84,   12,   35,   71, -100],
        [-100, -100, -100, -100,   35,   23,   68, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100,   74,   29,   25, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100,    7,   14,   66, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   68,   23, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60,   67, -100, -100],
        [-100, -100, -100, -100, -100, -100,   69, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100,   68,   84, -100, -100],
        [-100, -100, -100, -100, -100, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   69, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.6437, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.4192, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   68,   84, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   37,   15, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   58,   48, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   14, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100,   71, -100],
        [-100, -100, -100, -100, -100,   91, -100, -100, -100, -100],
        [-100, -100, -100, -100,   31, -100,   90, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100,   31, -100, -100],
        [-100, -100, -100, -100, -100,   87,   15, -100,   58, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100,    6, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,   59, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   14, -100, -100,    8, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100,   50, -100,   79,   76, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   23, -100, -100, -100],
        [-100, -100, -100, -100,   80,   31, -100,   88, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   84,   35, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   88,   28, -100, -100],
        [-100, -100, -100, -100,   84, -100,   38, -100, -100, -100],
        [-100, -100, -100, -100,   11, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   31, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   72, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.7400, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.4436, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,    7, -100,   54, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   12,   66, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   30, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,    7, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   80, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   60, -100],
        [-100, -100, -100, -100, -100,   14,    8, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   51, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.4569, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.4718, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   10, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100,   59, -100, -100],
        [-100, -100, -100, -100,   79,   31, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   37,   44, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   33, -100, -100],
        [-100, -100, -100, -100, -100, -100,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   90, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   10, -100, -100],
        [-100, -100, -100, -100, -100, -100,   67,   62, -100, -100],
        [-100, -100, -100, -100,   67, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   11, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100,   78, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   49, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72,   42, -100, -100, -100],
        [-100, -100, -100, -100, -100,   80, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   48,   18,   17, -100, -100],
        [-100, -100, -100, -100, -100,   60,   42,   72, -100, -100],
        [-100, -100, -100, -100, -100,   76, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   54, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100,   11, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.8132, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.4942, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   51, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   62, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   11,   65,   22, -100, -100],
        [-100, -100, -100, -100,   69, -100,   77, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   57,   25,   86, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100,   59, -100],
        [-100, -100, -100, -100, -100,   53, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   23, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   66, -100],
        [-100, -100, -100, -100, -100, -100,   62, -100, -100, -100],
        [-100, -100, -100, -100,   67, -100,   19, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100,   20,   90, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   43, -100, -100, -100],
        [-100, -100, -100, -100, -100,    5,   53, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100,   35,   66, -100],
        [-100, -100, -100, -100, -100,   32, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   85, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   14, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,   38,   65, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.7402, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.5186, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   31,   20,   90, -100, -100, -100],
        [-100, -100, -100, -100, -100,   78,   91, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   35, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   44, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   23, -100,   71, -100],
        [-100, -100, -100, -100, -100, -100,   67, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   72,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100,   76, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   73, -100, -100, -100],
        [-100, -100, -100, -100,   71,   45, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   35,   43, -100, -100, -100],
        [-100, -100, -100, -100,   31, -100,   90, -100, -100, -100],
        [-100, -100, -100, -100,   79,   37,   76, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   60, -100, -100, -100],
        [-100, -100, -100, -100,    7,   57,   25, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100,   78, -100, -100,   71,   72, -100],
        [-100, -100, -100, -100,   79, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,    6, -100, -100],
        [-100, -100, -100, -100,   80, -100,   23,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100,   12, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   20, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.4961, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.5410, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   59,   23, -100,   56, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   47, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100,   10, -100],
        [-100, -100, -100, -100,   15, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   60,   72, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   79,   78,   87, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100,   60, -100],
        [-100, -100, -100, -100,   68,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100,   37, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   18, -100, -100],
        [-100, -100, -100, -100,   84, -100, -100,   11, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   72,   71, -100],
        [-100, -100, -100, -100, -100,   36, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   45, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   45, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.8135, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.5621, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   68, -100,   35, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100,   72, -100],
        [-100, -100, -100, -100,   51, -100,   14, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   23, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   17, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   48, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   48, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   35, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.6671, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.5792, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   57, -100,   54, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23,   71, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   45,   86, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   12, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   72, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   84, -100, -100, -100, -100],
        [-100, -100, -100, -100,   31,   62,   32, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   53, -100, -100, -100],
        [-100, -100, -100, -100, -100,   48, -100,   69, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   67,   23, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   20,   29,   27, -100, -100, -100],
        [-100, -100, -100, -100,   84,   41, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   40, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100,   78, -100, -100],
        [-100, -100, -100, -100, -100,   79,   15, -100, -100, -100],
        [-100, -100, -100, -100, -100,   16, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   84, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   68,   84,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   72, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.1703, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.5925, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   43, -100, -100],
        [-100, -100, -100, -100, -100, -100,   46, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   68, -100,   71, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   20, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   41, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   63, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   71, -100,   68, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   73, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.9733, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6106, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100,   91, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   73, -100, -100],
        [-100, -100, -100, -100,   79,   15, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   58, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100,   43,   71,   51, -100, -100, -100],
        [-100, -100, -100, -100,   51,   84, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   59, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   63, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   30, -100],
        [-100, -100, -100, -100, -100,   72, -100,    6,   23, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   31, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   27,   28, -100, -100, -100],
        [-100, -100, -100, -100,   80,   84, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60, -100, -100,   71, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.8222, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6264, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   91, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   13,   28, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   71, -100, -100],
        [-100, -100, -100, -100, -100,   58, -100,   69, -100, -100],
        [-100, -100, -100, -100,   23,   60,   43, -100, -100, -100],
        [-100, -100, -100, -100,   43, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   38, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60,   42, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   10, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   57,   64,   28, -100],
        [-100, -100, -100, -100,   68, -100,   43, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   12,   45, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45,   49, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100,   59, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100,   42, -100, -100, -100],
        [-100, -100, -100, -100,   20, -100,    5, -100, -100, -100],
        [-100, -100, -100, -100,   67, -100,   68, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41, -100,   38, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100,   54, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   67, -100, -100],
        [-100, -100, -100, -100, -100, -100,   27, -100, -100, -100],
        [-100, -100, -100, -100, -100,   91,   59, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.6324, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6410, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100,   52, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100,   91, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   45, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   70, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100,   64, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   11, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   41,   84, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   15, -100, -100,   43, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   20, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   71, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.3746, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6545, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   40, -100, -100, -100],
        [-100, -100, -100, -100,   15, -100,   58, -100,   69, -100],
        [-100, -100, -100, -100, -100, -100, -100,   60, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,    6, -100, -100],
        [-100, -100, -100, -100, -100, -100,   61, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   67, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   71, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   88, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   28, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,    5, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   85, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   68, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.0868, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6670, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100,   74, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   60,   71, -100, -100, -100],
        [-100, -100, -100, -100,   84,   35,   40, -100, -100, -100],
        [-100, -100, -100, -100,   37,   26, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   15, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   31, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   10, -100, -100, -100],
        [-100, -100, -100, -100,   20, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60,   71, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,   35, -100, -100, -100,   65, -100],
        [-100, -100, -100, -100,    7, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14,   85, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   61, -100, -100],
        [-100, -100, -100, -100, -100, -100,   35, -100, -100, -100],
        [-100, -100, -100, -100,   51,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   23, -100,   14, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23, -100,   73, -100, -100],
        [-100, -100, -100, -100,   91, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   79, -100,   37, -100, -100, -100],
        [-100, -100, -100, -100,   15,   58,   87, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   24, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   79,   20, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.9741, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6799, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23,   60, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   59, -100, -100, -100],
        [-100, -100, -100, -100,   80,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100,   84,   77,   63, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100,   71,   16, -100, -100],
        [-100, -100, -100, -100, -100, -100,   72, -100, -100, -100],
        [-100, -100, -100, -100,   68,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   19, -100, -100, -100],
        [-100, -100, -100, -100, -100,   64, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   32,   88, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100,   29, -100, -100],
        [-100, -100, -100, -100,   80, -100,   23,   72,   42, -100],
        [-100, -100, -100, -100, -100,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,   51,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   32,   52, -100, -100],
        [-100, -100, -100, -100, -100,   59, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   71,   59,    6, -100],
        [-100, -100, -100, -100, -100, -100,   65, -100, -100, -100],
        [-100, -100, -100, -100, -100,    7, -100,   66, -100, -100],
        [-100, -100, -100, -100,   42, -100,   56, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   15,   58, -100, -100],
        [-100, -100, -100, -100, -100,   79,   90, -100, -100, -100],
        [-100, -100, -100, -100,   41, -100,   22, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   53, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.0986, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.6948, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   68,   23, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   71, -100, -100, -100],
        [-100, -100, -100, -100,   23,   71, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   91, -100,   12, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   71, -100, -100, -100],
        [-100, -100, -100, -100,   60,   57, -100,   54, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100,   38, -100, -100],
        [-100, -100, -100, -100,   79, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   83, -100, -100],
        [-100, -100, -100, -100,   76, -100, -100,   36, -100, -100],
        [-100, -100, -100, -100, -100, -100,   66, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100, -100,   91, -100],
        [-100, -100, -100, -100,   84, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   31, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   13, -100],
        [-100, -100, -100, -100,   80, -100, -100,   59, -100, -100],
        [-100, -100, -100, -100,   23, -100,   67, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   76, -100, -100,   15, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   82, -100],
        [-100, -100, -100, -100,    7,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41,   11, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.9583, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7129, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   51, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,    6, -100, -100, -100],
        [-100, -100, -100, -100, -100,   41, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   49, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   12, -100,   24, -100, -100, -100],
        [-100, -100, -100, -100,   57, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100,   71, -100, -100],
        [-100, -100, -100, -100, -100,   71, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   36, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   71, -100, -100, -100],
        [-100, -100, -100, -100,   68,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   69, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   73, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.5913, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7302, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   80, -100,   41,   35,   40, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,   31,   20, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   17, -100, -100],
        [-100, -100, -100, -100, -100, -100,   67, -100,   91, -100],
        [-100, -100, -100, -100,   23,   60,   43, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   79,   53,   87, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   68,   60, -100,   12, -100, -100],
        [-100, -100, -100, -100,   42, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   67, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   31,   74, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68,   23, -100, -100, -100],
        [-100, -100, -100, -100,   12, -100,   24, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   31, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,    7, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   88, -100, -100],
        [-100, -100, -100, -100,   67,   45, -100,   78,   23, -100],
        [-100, -100, -100, -100, -100,   64,   92, -100, -100, -100],
        [-100, -100, -100, -100,   79,   15, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100,   51,   83, -100, -100],
        [-100, -100, -100, -100, -100,   60,    7,   78, -100, -100],
        [-100, -100, -100, -100,   43,   72, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100,   23, -100,   71, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   67, -100, -100, -100],
        [-100, -100, -100, -100, -100,   20,   88, -100, -100, -100],
        [-100, -100, -100, -100,   31,   20, -100,   90, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.0529, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7457, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   64,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   29, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   45, -100, -100, -100],
        [-100, -100, -100, -100, -100,   72, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   22, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   36, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   85, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   59, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   67,   19, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   28, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60, -100,   90, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.7614, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7619, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   11, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   33, -100, -100, -100],
        [-100, -100, -100, -100, -100,   38, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   59,   22, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   15, -100,   17, -100, -100],
        [-100, -100, -100, -100, -100,   37,   58, -100, -100, -100],
        [-100, -100, -100, -100, -100,   12, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   11, -100, -100, -100],
        [-100, -100, -100, -100,   64, -100,   57,   21,   63, -100],
        [-100, -100, -100, -100,   55, -100,   14, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   10, -100],
        [-100, -100, -100, -100,   92,   29, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,    6, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   22, -100, -100, -100],
        [-100, -100, -100, -100,    7, -100, -100,   73, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100,   71, -100],
        [-100, -100, -100, -100, -100, -100,    6, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100,   22, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   57,   39, -100, -100, -100, -100],
        [-100, -100, -100, -100,   16,   71,   60, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(5.5504, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7756, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   80,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   78, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   84, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   82, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   60, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   23,   60,   78, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   87, -100,   58, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   14,    5, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   10, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   60, -100, -100],
        [-100, -100, -100, -100,   57, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.5557, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7876, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100,   59, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   73, -100, -100, -100],
        [-100, -100, -100, -100,   59,   43, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100,   84,   41, -100],
        [-100, -100, -100, -100,   80, -100,   14, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   31, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   68, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   71, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51,   60, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   31, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   28, -100,   88, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   33, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100,   60, -100, -100, -100],
        [-100, -100, -100, -100,    7,   14, -100,   70, -100, -100],
        [-100, -100, -100, -100, -100,   60,   72, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   64,   31, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   75,   63, -100],
        [-100, -100, -100, -100, -100, -100,   22, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,   67, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.4543, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.7992, device='cuda:0', grad_fn=<DivBackward0>)
call batch dict_keys(['input_ids', 'attention_mask', 'aug_input_ids', 'aug_attention_mask', 'labels', 'aug_labels'])
z1 pooled torch.Size([32, 768])
z1 torch.Size([32, 768]) torch.Size([32, 768])
z2 pooled torch.Size([32, 768])
labels tensor([[-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100,   71, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   46,   73, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100,    6, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   60,   42, -100, -100, -100],
        [-100, -100, -100, -100,   23, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   84,   71, -100, -100, -100],
        [-100, -100, -100, -100,   54, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   23, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   58, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   25, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100,   68, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100, -100, -100, -100, -100, -100, -100],
        [-100, -100, -100, -100,   80,   74,   21, -100, -100, -100],
        [-100, -100, -100, -100,   51, -100, -100, -100, -100, -100]],
       device='cuda:0')
head1 torch.Size([32, 10, 2308]) torch.Size([32, 10, 2308])
losses tensor(4.4949, device='cuda:0', grad_fn=<DivBackward0>) tensor(-0.8102, device='cuda:0', grad_fn=<DivBackward0>)
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/run.py", line 113, in <module>
    m.train(m.config.pretrain_data, batch_size = batch_size, epochs = 1, save_model = False)
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/pretrain.py", line 72, in train
    trainer.train()
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 2427, in _inner_training_loop
    batch_samples, num_items_in_batch = self.get_batch_samples(epoch_iterator, num_batches)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 5045, in get_batch_samples
    batch_samples += [next(epoch_iterator)]
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/accelerate/data_loader.py", line 563, in __iter__
    next_batch = next(dataloader_iter)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 701, in __next__
    data = self._next_data()
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 757, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 55, in fetch
    return self.collate_fn(data)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer_utils.py", line 841, in __call__
    return self.data_collator(features)
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/data_collator.py", line 97, in __call__
    batch["input_ids"], batch["labels"], batch["aug_input_ids"], batch["aug_labels"]= self.mask_tokens(
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/data_collator.py", line 136, in mask_tokens
    special_tokens_mask = torch.tensor(special_tokens_mask, dtype=torch.bool)
KeyboardInterrupt
Traceback (most recent call last):
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/run.py", line 113, in <module>
    m.train(m.config.pretrain_data, batch_size = batch_size, epochs = 1, save_model = False)
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/pretrain.py", line 72, in train
    trainer.train()
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 2427, in _inner_training_loop
    batch_samples, num_items_in_batch = self.get_batch_samples(epoch_iterator, num_batches)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer.py", line 5045, in get_batch_samples
    batch_samples += [next(epoch_iterator)]
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/accelerate/data_loader.py", line 563, in __iter__
    next_batch = next(dataloader_iter)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 701, in __next__
    data = self._next_data()
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 757, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 55, in fetch
    return self.collate_fn(data)
  File "/home/yamanishi/.pyenv/versions/miniconda3-latest/envs/berttrip/lib/python3.9/site-packages/transformers/trainer_utils.py", line 841, in __call__
    return self.data_collator(features)
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/data_collator.py", line 97, in __call__
    batch["input_ids"], batch["labels"], batch["aug_input_ids"], batch["aug_labels"]= self.mask_tokens(
  File "/home/yamanishi/project/airport/src/analysis/route_recommendation/BERT-Trip/BERT_Trip/model/data_collator.py", line 136, in mask_tokens
    special_tokens_mask = torch.tensor(special_tokens_mask, dtype=torch.bool)
KeyboardInterrupt
